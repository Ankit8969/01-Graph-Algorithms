#include <bits/stdc++.h>
using namespace std;

vector<int> adj[2000];
int n, x, y;
int vis[2000];
int dfsvis[2000];
int dist[2000];

// Detection in cycle in visited

bool dfs(int u)
{
    vis[u] = 1;
    dfsvis[u] = 1;

    for (auto x : adj[u])
    {
        if (!vis[x])
        {
            if (dfs(x) == true)
                return true;
        }
        else
        {
            if (dfsvis[x] == 1)
            {
                return true;
            }
        }
    }
    dfsvis[x] = 0;
    return false;
}

string solve()
{
    int ans = 0;
    for (int i = 1; i <= n; i++)
    {
        if (!vis[i])
        {
            ans += dfs(i);
        }
    }

    if (ans)
    {
        string s = "Cycle is Present";
        return s;
    }
    else
    {
        string s2 = "Cycle is NOt Present";
        return s2;
    }
}

int main()
{
    cin >> n;
    for (int i = 2; i <= n; i++)
    {
        cin >> x >> y;
        adj[x].push_back(y);
    }

    cout << solve() << endl;
}
