/* This algorithm is used to finding the shortest distance from one node to all other node if the graph */
/* This algorithm does't work for -ve weight of edge */

/ * In this algorithm we use priority_queue or set because these two Data Structure provide insertion deletion in log(N) complexity */



/*..................................Implementation....................................... *\

#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> adj[2000];
int n;
int x, y;
int vis[2000];
int dist[2000];

void dijkastra(int s)
{
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    pq.push({0, s});
    dist[s] = 0;
    while (!pq.empty())
    {
        pair<int, int> t = pq.top();
        pq.pop();
        for (auto x : adj[t.second])
        {
            int d = x.second + t.first;
            if (dist[x.first] > d)
            {
                dist[x.first] = d;
                pq.push({d, x.first});
            }
        }
    }
}

int main()
{
    int k;
    cin >> n >> k;
    for (int i = 0; i < k; i++)
    {
        int z;
        cin >> x >> y >> z;
        adj[x].push_back({y, z});
        adj[y].push_back({x, z});
    }

    int s;
    cin >> s;
    for (int i = 0; i <= n; i++)
        dist[i] = INT_MAX;
    dijkastra(s);

    for (int i = 0; i <= n; i++)
        cout << dist[i] << " ";
    cout << endl;
}
...........................Input for this algorithm..........................
14 0
0 1 4
0 7 8
1 2 8
1 7 11
2 3 7
2 8 2
2 5 4
3 4 9
3 5 14
4 5 10
5 6 2
6 7 1
6 8 6
7 8 7

.....................Output for this algorithm...........................
0 4 12 19 21 11 9 8 14 









