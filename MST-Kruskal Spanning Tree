#include <bits/stdc++.h>
using namespace std;

int n, k;
vector<pair<int, int>> adj[2000];
vector<int> parent(2000 + 1);
vector<int> ranks(2000 + 1, 0);
struct node
{
    int node1;
    int node2;
    int weight;
    node(int x, int y, int z)
    {
        node1 = x;
        node2 = y;
        weight = z;
    }
};
bool comp(node a, node b)
{
    return a.weight < b.weight;
}

int find(int x)
{
    if (x == parent[x])
        return x;
    parent[x] = find(parent[x]);
    return parent[x];
}

void unions(int x, int y)
{
    int x_rep = find(x);
    int y_rep = find(y);
    if (x_rep == y_rep)
        return;
    if (ranks[x_rep] < ranks[y_rep])
        parent[x_rep] = y_rep;
    else if (ranks[x_rep] > ranks[y_rep])
        parent[y_rep] = x_rep;
    else
    {
        parent[y_rep] = x_rep;
        ranks[x_rep]++;
    }
}

int main()
{
    vector<node> v;
    cin >> n >> k;
    for (int i = 0; i < k; i++)
    {
        int x, y, z;
        cin >> x >> y >> z;
        v.push_back(node(x, y, z));
    }

    sort(v.begin(), v.end(), comp);

    for (int i = 1; i <= n; i++)
        parent[i] = i;

    for (auto x : v)
    {
        if (find(x.node1) == find(x.node2))
            continue;
        adj[x.node1].push_back({x.node2, x.weight});
        unions(x.node1, x.node2);
    }

    for (int i = 1; i <= n; i++)
    {
        for (auto x : adj[i])
        {
            cout << i << " " << x.first << " " << x.second << endl;
        }
    }
}
